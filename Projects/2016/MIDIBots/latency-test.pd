#N canvas 3 49 1194 1520 10;
#X text 284 28 Testing how to delay different MIDI channels by different
amounts \, for the MIDIBots 2016 project for Robocup.;
#X floatatom 248 687 5 0 0 1 ms - -, f 5;
#X text 272 708 Each pipe is a delaying buffer \, with the delay time
(in ms) set by the right inlet.;
#X text 166 111 Generate some MIDI note events:;
#X text 131 347 Split according to channel. Initially we'll just assume
that each channel has its own delay.;
#X obj 771 1394 midiout;
#X text 693 1317 Do we need separate MIDI outputs for FluidSynth and
for the MIDIBot MIDI daisy-chain? How are the [midiout]s numbered?
;
#X obj 658 224 notein;
#X floatatom 637 265 5 0 0 0 Note - -, f 5;
#X floatatom 683 286 5 0 0 0 Velocity - -, f 5;
#X floatatom 728 307 5 0 0 0 Channel - -, f 5;
#X text 687 365 To filter/route by channel \, I think we need to reverse
the elements (or at least place the channel first):;
#X obj 581 374 swap;
#X obj 620 428 pack f f f;
#X msg 620 450 \$3 \$1 \$2;
#X obj 522 570 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 577 571 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 635 567 bng 15 250 50 0 empty empty IGNORED! 17 7 0 10 -262144
-1 -1;
#X obj 550 569 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 267 180 seq;
#X obj 945 1392 ctlout;
#X text 667 1420 [midiout] is for raw MIDI output;
#X text 42 180 What package provides [seq]?;
#X obj 225 223 midiparse;
#X obj 191 262 import cyclone;
#X obj 181 709 pipe 0 0 0;
#X obj 276 764 pack f f;
#X obj 276 786 print;
#X text 351 766 <- reassemble for printing;
#X obj 852 1386 noteout 1;
#X obj 206 857 noteout 1;
#X msg 139 795 69 100;
#X msg 173 823 69 0;
#X text 79 683 Basic delay:;
#X text 642 531 <- Output from here is <note \, velocity>;
#X obj 248 641 loadbang;
#X msg 248 663 750;
#X obj 554 832 unpack f f;
#X floatatom 554 854 5 0 0 0 - - -, f 5;
#X floatatom 625 855 5 0 0 0 - - -, f 5;
#X obj 625 874 / 127;
#X floatatom 625 896 5 0 0 0 - - -, f 5;
#X obj 557 938 pipe 0 0 0;
#X obj 558 970 noteout 2;
#X obj 683 854 loadbang;
#X msg 683 876 2000;
#X floatatom 683 898 5 0 0 0 - - -, f 5;
#X obj 625 915 *;
#X text 585 630 A refinement would be to have the delay determined
by the MIDI velocity \, note number \, and channel. This would allow
us to handle all kinds of note-playing mechanisms.;
#X text 643 831 Here's a simple linear one:;
#X text 561 1025 Of course \, this kind of model assumes that the robot
will return to its resting position in time for the next note. If it's
still moving \, all bets are off \, unless we have some way to tell
where it is. As long as the notes don't come too fast \, it shouldn't
be a problem. Hm \, maybe we could use a rate limiter to cull notes
that are too fast for the robot in question?;
#X obj 692 1113 speedlim;
#X text 567 1146 NOTE: because velocity 0 -> note off \, this approach
won't work properly for instruments that can hold notes! They will
often get stuck. However \, for drums \, it's probably fine.;
#X obj 857 801 unpack f f;
#X floatatom 857 823 5 0 0 0 - - -, f 5;
#X floatatom 924 824 5 0 0 0 - - -, f 5;
#X obj 924 843 / 127;
#X floatatom 924 865 5 0 0 0 - - -, f 5;
#X obj 857 938 pipe 0 0 0;
#X obj 986 825 loadbang;
#X floatatom 986 869 5 0 0 0 - - -, f 5;
#X obj 924 884 *;
#X obj 924 906 +;
#X obj 1056 845 loadbang;
#X floatatom 1056 889 5 0 0 0 - - -, f 5;
#X obj 858 970 noteout 3;
#X obj 532 514 route 1 2 3 10;
#X msg 1056 867 200;
#X msg 986 847 70;
#X text 565 1215 The more I think about \, the more I realise how difficult
the planning and motion control would be if we want the robots to play
with variable dynamics!;
#X text 143 1041 It might be reasonable to apply a different delay
for different notes however \, as in the case of a percussion robot
with different swings for the different drums.;
#X obj 603 571 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 188 1101 unpack;
#X floatatom 188 1123 5 0 0 0 - - -, f 5;
#X floatatom 413 1252 5 0 0 0 - - -, f 5;
#X obj 188 1144 route 36 38 40 42;
#X obj 201 1438 noteout 10;
#X obj 97 1410 pack f f;
#X text 172 1412 <- reassemble for printing;
#X obj 97 1432 print drum:;
#X obj 125 1208 print routed;
#X obj 191 1378 pipe 36 0 100;
#X obj 216 1339 pipe 38 0 250;
#X obj 243 1310 pipe 40 0 500;
#X obj 272 1280 pipe 42 0 800;
#X text 818 744 Slightly safer would be one with a zero-offset \, but
even with a shallow slope \, note-offs could come out before the corresponding
note-on!:;
#X text 586 149 MIDI notes in Pd are triples of numbers \, indicating
the note \, velocity \, and channel. [notein] receives these from the
outside world \, and splits them into streams. Note that the values
are outputted in right-to-left ordering.;
#X text 713 428 <- First \, we pack them back into a single message.
;
#X text 689 450 <- Then reorder \, with channel first so we can filter
on it.;
#X text 646 502 <- [route] splits up a stream based on the first element
of the message.;
#X connect 1 0 25 2;
#X connect 7 0 8 0;
#X connect 7 1 9 0;
#X connect 7 2 10 0;
#X connect 8 0 13 0;
#X connect 9 0 13 1;
#X connect 10 0 13 2;
#X connect 13 0 14 0;
#X connect 14 0 66 0;
#X connect 25 0 26 0;
#X connect 25 0 30 0;
#X connect 25 1 26 1;
#X connect 25 1 30 1;
#X connect 26 0 27 0;
#X connect 31 0 30 0;
#X connect 32 0 30 0;
#X connect 35 0 36 0;
#X connect 36 0 1 0;
#X connect 37 0 38 0;
#X connect 37 1 39 0;
#X connect 38 0 42 0;
#X connect 39 0 40 0;
#X connect 39 0 42 1;
#X connect 40 0 41 0;
#X connect 41 0 47 0;
#X connect 42 0 43 0;
#X connect 42 1 43 1;
#X connect 44 0 45 0;
#X connect 45 0 46 0;
#X connect 46 0 47 1;
#X connect 47 0 42 2;
#X connect 53 0 54 0;
#X connect 53 1 55 0;
#X connect 54 0 58 0;
#X connect 55 0 56 0;
#X connect 55 0 58 1;
#X connect 56 0 57 0;
#X connect 57 0 61 0;
#X connect 58 0 65 0;
#X connect 58 1 65 1;
#X connect 59 0 68 0;
#X connect 60 0 61 1;
#X connect 61 0 62 0;
#X connect 62 0 58 2;
#X connect 63 0 67 0;
#X connect 64 0 62 1;
#X connect 66 0 15 0;
#X connect 66 0 25 0;
#X connect 66 1 18 0;
#X connect 66 1 37 0;
#X connect 66 2 16 0;
#X connect 66 2 53 0;
#X connect 66 3 71 0;
#X connect 66 3 72 0;
#X connect 66 4 17 0;
#X connect 67 0 64 0;
#X connect 68 0 60 0;
#X connect 72 0 73 0;
#X connect 72 1 74 0;
#X connect 73 0 75 0;
#X connect 74 0 81 1;
#X connect 74 0 82 1;
#X connect 74 0 83 1;
#X connect 74 0 84 1;
#X connect 75 0 80 0;
#X connect 75 0 81 0;
#X connect 75 1 82 0;
#X connect 75 2 83 0;
#X connect 75 3 84 0;
#X connect 77 0 79 0;
#X connect 81 0 76 0;
#X connect 81 0 77 0;
#X connect 81 1 76 1;
#X connect 81 1 77 1;
#X connect 82 0 76 0;
#X connect 82 1 76 1;
#X connect 83 0 76 0;
#X connect 83 1 76 1;
#X connect 84 0 76 0;
#X connect 84 1 76 1;
