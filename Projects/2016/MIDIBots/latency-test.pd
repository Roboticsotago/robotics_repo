#N canvas 101 53 1237 715 10;
#X text 199 11 Testing how to delay different MIDI channels by different
amounts \, for the MIDIBots 2016 project for Robocup.;
#X floatatom 248 660 5 0 0 1 ms - -, f 5;
#X text 214 119 Generate some MIDI note events:;
#X obj 771 1394 midiout;
#X text 693 1317 Do we need separate MIDI outputs for FluidSynth and
for the MIDIBot MIDI daisy-chain? How are the [midiout]s numbered?
;
#X obj 789 332 notein;
#X floatatom 615 382 5 0 0 0 Note - -, f 5;
#X floatatom 715 380 5 0 0 0 Velocity - -, f 5;
#X floatatom 811 372 5 0 0 0 Channel - -, f 5;
#X obj 511 446 swap;
#X obj 620 428 pack f f f;
#X msg 620 450 \$3 \$1 \$2;
#X obj 522 570 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 577 571 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 675 571 bng 15 250 50 0 empty empty IGNORED! 17 7 0 10 -262144
-1 -1;
#X obj 550 569 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 945 1392 ctlout;
#X text 667 1420 [midiout] is for raw MIDI output;
#X text 879 10 What package provides [seq]?;
#X obj 1003 93 import cyclone;
#X obj 181 697 pipe 0 0 0;
#X obj 276 802 print;
#X obj 852 1386 noteout 1;
#X msg 91 826 69 100;
#X msg 156 828 69 0;
#X text 730 540 <- Output from here is <note \, velocity>;
#X obj 248 614 loadbang;
#X msg 248 636 750;
#X obj 557 869 unpack f f;
#X floatatom 557 891 5 0 0 0 - - -, f 5;
#X floatatom 625 892 5 0 0 0 - - -, f 5;
#X obj 625 911 / 127;
#X floatatom 625 933 5 0 0 0 - - -, f 5;
#X obj 557 975 pipe 0 0 0;
#X obj 557 1007 noteout 2;
#X obj 683 891 loadbang;
#X msg 683 913 2000;
#X floatatom 683 935 5 0 0 0 - - -, f 5;
#X obj 625 952 *;
#X text 653 1026 Of course \, this kind of model assumes that the robot
will return to its resting position in time for the next note. If it's
still moving \, all bets are off \, unless we have some way to tell
where it is. As long as the notes don't come too fast \, it shouldn't
be a problem. Hm \, maybe we could use a rate limiter to cull notes
that are too fast for the robot in question?;
#X obj 784 1114 speedlim;
#X text 659 1147 NOTE: because velocity 0 -> note off \, this approach
won't work properly for instruments that can hold notes! They will
often get stuck. However \, for drums \, it's probably fine.;
#X obj 857 801 unpack f f;
#X floatatom 857 823 5 0 0 0 - - -, f 5;
#X floatatom 924 824 5 0 0 0 - - -, f 5;
#X obj 924 843 / 127;
#X floatatom 924 865 5 0 0 0 - - -, f 5;
#X obj 857 938 pipe 0 0 0;
#X obj 986 825 loadbang;
#X floatatom 986 869 5 0 0 0 - - -, f 5;
#X obj 924 884 *;
#X obj 924 906 +;
#X obj 1056 845 loadbang;
#X floatatom 1056 889 5 0 0 0 - - -, f 5;
#X obj 857 970 noteout 3;
#X msg 1056 867 200;
#X msg 986 847 70;
#X obj 603 571 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 188 1101 unpack;
#X floatatom 188 1123 5 0 0 0 - - -, f 5;
#X floatatom 412 1237 5 0 0 0 - - -, f 5;
#X obj 97 1410 pack f f;
#X text 172 1412 <- reassemble for printing;
#X obj 97 1432 print drum:;
#X text 818 744 Slightly safer would be one with a zero-offset \, but
even with a shallow slope \, note-offs could come out before the corresponding
note-on!:;
#X text 779 227 MIDI notes in Pd are triples of numbers \, indicating
the note \, velocity \, and channel. [notein] receives these from the
outside world \, and splits them into streams. Note that the values
are outputted in right-to-left ordering.;
#X text 713 428 <- First \, we pack them back into a single message.
;
#X text 689 450 <- Then reorder \, with channel first so we can filter
on it.;
#X text 129 1175 Because the messages going into the [route] are individual
values \, the outputs are bang events (not note numbers).;
#X text 351 782 <- reassemble for printing (for debugging);
#X text 199 824 <- You can send note-velocity-channel lists to [noteout]
to play/stop notes.;
#X text 848 331 <- [notein] receives MIDI note data from the outside
world.;
#X text 577 442 ?;
#X text 120 416 Split according to channel. Initially we'll assume
that each channel has its own delay.;
#X text 35 515 NOTE: the MIDI streams going to the computer's synthesiser
(FluidSynth) will probably need the longest delays \, in order to play
in sync with the physical instruments.;
#X text 760 393 To filter/route by channel \, we need to change the
order of the elements so that the channel number is first.;
#X text 734 512 <- [route] splits up a stream based on the first element
of the message. The first element is not copied to the output.;
#X text 585 630 A refinement would be to have the delay determined
by the MIDI velocity \, note number \, and channel \, instead of having
a single delay applied to the whole channel. This would allow us to
handle all kinds of note-playing mechanisms.;
#X text 878 31 It can play a MIDI file!;
#X obj 444 116 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 444 137 metro;
#X obj 476 71 loadbang;
#X floatatom 476 115 5 0 0 0 - - -, f 5;
#X obj 444 157 bng 15 100 25 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 575 249 makenote 100 125;
#X obj 575 279 pack f f 1;
#X floatatom 665 282 5 0 0 2 Ch - -, f 5;
#X text 657 1216 Also \, the more I think about \, the more I realise
how difficult the planning and motion control would be if we want the
robots to play with variable dynamics!;
#X text 272 696 [pipe] is the core element of this whole patch. Each
pipe is a delaying buffer \, with the delay time (in ms) set by the
right inlet. We give it several arguments because we want to handle
<note \, velocity> lists. Things can exit the pipe in a different order
from their entry!;
#X text 176 585 Basic delay for channel 1:;
#X text 533 847 Here's a simple linear one for channel 2:;
#X text 103 1021 It might be reasonable to apply a different delay
for different notes \, as in the case of a percussion robot with different
swings for the different drums. This would even let us have multiple
bots playing drums on channel 10 \, provided their instrument notes
didn't overlap.;
#X obj 1037 54 cyclone/midiparse;
#X obj 1079 11 cyclone/seq;
#X obj 612 309 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 452 1385 noteout 10 2;
#X floatatom 449 857 5 0 0 1 ms - -, f 5;
#X obj 382 876 pipe 0 0 0;
#X obj 148 725 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 393 890 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 134 928 How do we send MIDI to a specific device?;
#X obj 42 961 midiout;
#X msg 35 906 70 127 1;
#X msg 354 850 send port 2;
#X floatatom 509 867 5 0 0 0 - - -, f 5;
#X obj 509 886 + 16;
#X floatatom 272 849 5 0 0 0 - - -, f 5;
#X obj 181 868 noteout 10;
#X text 131 947 In Max/MSP you can apparently send a "port" message
to the [noteout]/[midiout] \, but that doesn't seem to work here.;
#X text 133 986 Ah \, channels 1..16 are for port 1 \, 17..32 for port
2 \, etc.;
#X obj 706 220 loadbang;
#X msg 706 242 1;
#X obj 511 802 loadbang;
#X msg 511 824 1;
#X obj 382 903 noteout;
#X obj 451 919 pack f f f;
#X obj 451 941 print;
#X obj 276 780 pack f f f;
#X floatatom 379 1376 5 0 0 0 - - -, f 5;
#X obj 532 514 route 5 6 7 8 9 10 11;
#X obj 201 1438 noteout 11;
#X obj 651 572 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 644 223 5 0 0 0 - - -, f 5;
#X obj 191 1378 pipe 60 0 100;
#X text 76 1320 PercussionBot;
#X obj 7 267 makenote 100 125;
#X msg 7 243 60;
#X obj 7 294 pack f f 11;
#X obj 137 267 makenote 100 125;
#X obj 137 294 pack f f 11;
#X obj 267 267 makenote 100 125;
#X obj 267 294 pack f f 11;
#X msg 137 243 36;
#X msg 267 243 39;
#X msg 476 93 1000;
#X obj 216 1339 pipe 36 0 250;
#X obj 265 1298 pipe 39 0 500;
#X obj 160 1146 route 60 36 39 40;
#X obj 268 1265 pipe 40 0 500;
#X obj 418 271 makenote 100 125;
#X obj 418 298 pack f f 11;
#X msg 418 247 40;
#X obj 444 177 t b b b b;
#X obj 386 217 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 425 218 moses 1;
#X obj 476 1181 vsl 15 128 0 500 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 1400 1;
#X obj 499 1193 vsl 15 128 0 500 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 1900 1;
#X floatatom 503 1342 5 0 0 0 - - -, f 5;
#X floatatom 426 1301 5 0 0 0 - - -, f 5;
#X connect 1 0 20 2;
#X connect 5 0 6 0;
#X connect 5 1 7 0;
#X connect 5 2 8 0;
#X connect 6 0 10 0;
#X connect 7 0 10 1;
#X connect 8 0 10 2;
#X connect 10 0 11 0;
#X connect 11 0 119 0;
#X connect 20 0 98 0;
#X connect 20 0 107 0;
#X connect 20 0 117 0;
#X connect 20 1 107 1;
#X connect 20 1 117 1;
#X connect 23 0 107 0;
#X connect 24 0 107 0;
#X connect 26 0 27 0;
#X connect 27 0 1 0;
#X connect 28 0 29 0;
#X connect 28 1 30 0;
#X connect 29 0 33 0;
#X connect 30 0 31 0;
#X connect 30 0 33 1;
#X connect 31 0 32 0;
#X connect 32 0 38 0;
#X connect 33 0 34 0;
#X connect 33 1 34 1;
#X connect 35 0 36 0;
#X connect 36 0 37 0;
#X connect 37 0 38 1;
#X connect 38 0 33 2;
#X connect 42 0 43 0;
#X connect 42 1 44 0;
#X connect 43 0 47 0;
#X connect 44 0 45 0;
#X connect 44 0 47 1;
#X connect 45 0 46 0;
#X connect 46 0 50 0;
#X connect 47 0 54 0;
#X connect 47 1 54 1;
#X connect 48 0 56 0;
#X connect 49 0 50 1;
#X connect 50 0 51 0;
#X connect 51 0 47 2;
#X connect 52 0 55 0;
#X connect 53 0 51 1;
#X connect 55 0 53 0;
#X connect 56 0 49 0;
#X connect 58 0 59 0;
#X connect 58 1 60 0;
#X connect 59 0 137 0;
#X connect 60 0 123 1;
#X connect 60 0 135 1;
#X connect 60 0 136 1;
#X connect 60 0 138 1;
#X connect 61 0 63 0;
#X connect 79 0 80 0;
#X connect 80 0 83 0;
#X connect 81 0 134 0;
#X connect 82 0 80 1;
#X connect 83 0 142 0;
#X connect 84 0 85 0;
#X connect 84 1 85 1;
#X connect 85 0 11 0;
#X connect 85 0 94 0;
#X connect 86 0 85 2;
#X connect 96 0 97 2;
#X connect 97 0 99 0;
#X connect 97 0 114 0;
#X connect 97 0 115 0;
#X connect 97 1 114 1;
#X connect 97 1 115 1;
#X connect 102 0 101 0;
#X connect 103 0 114 0;
#X connect 104 0 105 0;
#X connect 105 0 114 2;
#X connect 105 0 115 2;
#X connect 106 0 107 2;
#X connect 106 0 117 2;
#X connect 110 0 111 0;
#X connect 111 0 86 0;
#X connect 112 0 113 0;
#X connect 113 0 104 0;
#X connect 115 0 116 0;
#X connect 117 0 21 0;
#X connect 118 0 120 2;
#X connect 119 0 12 0;
#X connect 119 0 20 0;
#X connect 119 1 15 0;
#X connect 119 1 28 0;
#X connect 119 2 13 0;
#X connect 119 2 42 0;
#X connect 119 3 57 0;
#X connect 119 3 97 0;
#X connect 119 6 58 0;
#X connect 119 6 121 0;
#X connect 119 7 14 0;
#X connect 122 0 84 1;
#X connect 123 0 61 0;
#X connect 123 0 120 0;
#X connect 123 1 61 1;
#X connect 123 1 120 1;
#X connect 125 0 127 0;
#X connect 125 1 127 1;
#X connect 126 0 125 0;
#X connect 127 0 11 0;
#X connect 128 0 129 0;
#X connect 128 1 129 1;
#X connect 129 0 11 0;
#X connect 130 0 131 0;
#X connect 130 1 131 1;
#X connect 131 0 11 0;
#X connect 132 0 128 0;
#X connect 133 0 130 0;
#X connect 134 0 82 0;
#X connect 135 0 120 0;
#X connect 135 1 120 1;
#X connect 136 0 120 0;
#X connect 136 1 120 1;
#X connect 137 0 123 0;
#X connect 137 1 135 0;
#X connect 137 2 136 0;
#X connect 137 3 138 0;
#X connect 138 0 120 0;
#X connect 138 1 120 1;
#X connect 139 0 140 0;
#X connect 139 1 140 1;
#X connect 140 0 11 0;
#X connect 141 0 139 0;
#X connect 142 1 132 0;
#X connect 142 2 126 0;
#X connect 142 2 143 0;
#X connect 143 0 144 0;
#X connect 144 0 133 0;
#X connect 144 1 141 0;
#X connect 145 0 148 0;
#X connect 146 0 147 0;
#X connect 147 0 136 2;
#X connect 148 0 138 2;
