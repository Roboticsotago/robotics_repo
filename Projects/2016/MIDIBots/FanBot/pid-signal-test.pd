#N canvas 3 49 1194 1520 10;
#X text 111 20 PID control (using signals) in Pure Data \, CME 2016-08-12
;
#X text 139 54 I remember trying this before with messages to create
a position controller for a Lego servo motor. It was pretty sluggish
\, though.;
#X text 552 526 Fan model (PWM control in \, speed out):;
#X obj 541 552 +~;
#X obj 541 574 clip~ 0 1;
#X text 624 577 <- Limit to real range of speeds;
#X text 631 683 <- Make laggy (~10 s to reach full speed);
#X obj 542 680 lop~ 0.1;
#X obj 606 711 s~ test-speed;
#X text 726 197 Hmm \, why not try actually generating a PWM signal?
Just to see what's involved. :);
#X floatatom 790 339 8 0 0 0 PWM_frequency - -, f 8;
#X obj 790 406 phasor~;
#X obj 922 385 sig~;
#X obj 789 432 expr~ $v1 < $v2;
#X obj 1059 1261 tabsend~ scope;
#N canvas 0 50 450 250 (subpatch) 0;
#X array scope 64 float 3;
#A 0 0.000806159 0.000806357 0.000806159 0.000806357 0.000806159 0.000806357
0.000806159 0.000806357 0.000806159 0.000806357 0.000806159 0.000806357
0.000806159 0.000806357 0.000806159 0.000806357 0.000806159 0.000806357
0.000806159 0.000806357 0.000806159 0.000806357 0.000806159 0.000806357
0.000806159 0.000806357 0.000806159 0.000806357 0.000806159 0.000806357
0.000806159 0.000806357 0.000806159 0.000806357 0.000806159 0.000806357
0.000806159 0.000806357 0.000806159 0.000806357 0.000806159 0.000806357
0.000806159 0.000806357 0.000806159 0.000806357 0.000806159 0.000806357
0.000806159 0.000806357 0.000806159 0.000806357 0.000806159 0.000806357
0.000806159 0.000806357 0.000806159 0.000806357 0.000806159 0.000806357
0.000806159 0.000806357 0.000806159 0.000806357;
#X coords 0 1 64 -1 200 140 1;
#X restore 952 505 graph;
#X obj 922 363 clip 0 1;
#X obj 989 346 vsl 15 128 0 1 0 0 empty empty PWM_duty 0 -9 0 10 -262144
-1 -1 12700 1;
#X obj 789 482 dac~;
#X obj 789 459 *~ 0.1;
#X obj 482 1442 delwrite~ control 500;
#X obj 540 330 delread~ control;
#X text 37 973 Compute error:;
#X obj 136 373 vsl 15 128 0 1 0 0 empty empty Target 0 -9 0 10 -262144
-1 -1 0 1;
#X floatatom 136 509 8 0 0 0 - - -, f 8;
#X obj 136 528 sig~;
#X obj 152 972 -~;
#X floatatom 182 1039 8 0 0 0 Kp - -, f 8;
#X obj 182 1058 sig~;
#X obj 148 1088 *~;
#X obj 182 993 loadbang;
#X text 107 931 Proportional element:;
#X obj 481 1399 +~;
#X text 511 1400 <- Combine P \, I \, and D components;
#X text 363 864 Integral element:;
#X obj 643 1109 lop~ 0.1;
#X text 616 939 Cumulative error (LPF?);
#X text 349 889 Compute error:;
#X obj 455 889 -~;
#X msg 481 970 clear;
#X text 695 974 TODO: deadband?;
#X obj 441 1293 tgl 15 0 empty empty P 17 7 0 10 -262144 -1 -1 1 1
;
#X obj 423 1315 *~;
#X obj 720 1046 loadbang;
#X floatatom 720 1090 8 0 0 0 Ki - -, f 8;
#X obj 720 1109 sig~;
#X obj 688 1133 *~;
#X obj 491 1293 tgl 15 0 empty empty I 17 7 0 10 -262144 -1 -1 1 1
;
#X obj 473 1315 *~;
#X obj 341 1092 rpole~ 1.00001;
#X text 970 939 Derivative element:;
#X obj 1070 1016 loadbang;
#X floatatom 1070 1060 8 0 0 0 Kd - -, f 8;
#X obj 1070 1079 sig~;
#X obj 1038 1103 *~;
#X obj 541 1293 tgl 15 0 empty empty D 17 7 0 10 -262144 -1 -1 1 1
;
#X obj 523 1315 *~;
#X obj 1040 963 -~;
#X obj 1039 987 fexpr~ $x1 - $y[-1];
#X msg 182 1015 100;
#X text 390 307 Control signal from PID error analysis:;
#X obj 541 617 pow~ 0.2;
#X text 605 624 <- For testing: nonlinearity and scaling;
#X text 1045 1161 LPF for less twitch?;
#X obj 541 639 *~ 0.2;
#X text 622 641 NOTE: these will probably require K adjs;
#X obj 497 635 +~;
#X obj 461 482 vsl 15 64 -0.5 0.5 0 0 empty empty Perturbation 0 -9
0 10 -262144 -1 -1 600 1;
#X obj 461 618 sig~;
#X obj 293 484 vsl 15 64 0 2 0 0 empty empty Plant_Scaling 0 -9 0 10
-262144 -1 -1 6300 1;
#X obj 293 620 sig~;
#X obj 329 637 *~;
#X floatatom 248 628 5 0 0 0 - - -, f 5;
#X obj 262 440 loadbang;
#X msg 262 462 1;
#X obj 892 342 clip~ 0 1;
#X floatatom 419 618 5 0 0 0 - - -, f 5;
#X obj 891 407 lop~ 10;
#X obj 987 701 lop~ 5;
#X obj 790 294 loadbang;
#X msg 790 316 1000;
#X obj 299 1389 slider~;
#X obj 547 713 slider~;
#X obj 78 1001 slider~;
#X obj 209 1389 slider~;
#X obj 389 1389 slider~;
#X obj 565 1198 slider~;
#X obj 939 1034 slider~;
#X obj 989 728 slider~;
#X obj 477 358 slider~;
#X obj 945 1210 slider~;
#X obj 566 1050 loadbang;
#X floatatom 566 1134 8 0 0 0 Ki - -, f 8;
#X obj 566 1153 sig~;
#X obj 520 1193 *~;
#X msg 720 1068 1000;
#X floatatom 566 1094 5 0 0 0 - - -, f 5;
#X obj 566 1113 / 1e+06;
#X obj 376 942 slider~;
#X msg 358 1072 clear;
#X obj 344 1117 rzero~;
#X obj 648 1198 slider~;
#X floatatom 562 861 8 0 0 0 - - -, f 8;
#X obj 562 880 sig~;
#X text 680 867 Damn \, I think fexpr has an epsilon of about 0.003
\, which limits the ability of the integral to converge! I wondered
why nothing was happening as it got closer to the set point.;
#X obj 467 947 *~ 1e+07;
#X obj 465 1017 *~ 1e-07;
#X obj 42 595 s~ target-speed;
#X msg 566 1072 150;
#X msg 1070 1038 50;
#X text 230 152 NOTE: integral windup can be a problem \, especially
with slow rise times and when actuator saturation (clipping) occurs.
;
#X floatatom 1132 1090 5 0 0 0 - - -, f 5;
#X obj 1132 1109 expr 1/$f1;
#X floatatom 1132 1131 5 0 0 0 - - -, f 5;
#X obj 1037 1137 lop~;
#X obj 1145 1046 loadbang;
#X floatatom 607 659 5 0 0 0 - - -, f 5;
#X msg 1078 1109 clear;
#X text 967 814 Might want time-averaged derivative so as not to be
so twitchy. Is a LPF close enough to time-average? What if we just
used an HPF? Or a BPF?;
#X text 1114 956 Warning: display value could be misleading if oscillating
at HF!;
#X obj 466 994 fexpr~ $y1[-1] + $x1[0];
#X msg 1145 1068 0.1;
#X obj 971 989 bp~ 10 5;
#X obj 598 425 slider~;
#X obj 583 386 expr~ !($v1 <= 0 || $v1 >= 1);
#X obj 456 912 *~;
#X text 489 915 <- Anti-windup (don't integrate error if actuator is
maxxed out), f 65;
#X text 586 360 Anti-windup (actuator-not-saturated check):;
#X text 259 183 This can be addressed by discarding error input into
the integrator whenever the actuator is trying to be driven beyond
its limits. However \, this means you can't disable the proportional
component \, as it might get stuck.;
#X floatatom 876 977 8 0 0 0 alpha - -, f 8;
#X obj 586 1020 fexpr~ $y1[-1] + $x2[0] * ($x1[0]-$y1[-1]);
#X obj 876 996 sig~;
#X obj 871 934 loadbang;
#X msg 871 956 1e-05;
#X text 674 1001 Exponential weighted avg:;
#X floatatom 1460 1154 8 0 0 0 alpha - -, f 8;
#X obj 1170 1197 fexpr~ $y1[-1] + $x2[0] * ($x1[0]-$y1[-1]);
#X obj 1460 1173 sig~;
#X obj 1455 1111 loadbang;
#X text 1258 1178 Exponential weighted avg:;
#X msg 1455 1133 0.1;
#X msg 1207 1146 clear;
#X connect 3 0 4 0;
#X connect 4 0 71 1;
#X connect 7 0 8 0;
#X connect 7 0 26 1;
#X connect 7 0 38 1;
#X connect 7 0 57 1;
#X connect 7 0 82 0;
#X connect 10 0 11 0;
#X connect 11 0 13 0;
#X connect 12 0 77 0;
#X connect 13 0 19 0;
#X connect 13 0 78 0;
#X connect 16 0 12 0;
#X connect 17 0 16 0;
#X connect 19 0 18 0;
#X connect 21 0 3 0;
#X connect 21 0 75 0;
#X connect 21 0 89 0;
#X connect 21 0 124 0;
#X connect 23 0 24 0;
#X connect 24 0 25 0;
#X connect 25 0 26 0;
#X connect 25 0 38 0;
#X connect 25 0 57 0;
#X connect 25 0 107 0;
#X connect 26 0 29 0;
#X connect 26 0 83 0;
#X connect 27 0 28 0;
#X connect 28 0 29 1;
#X connect 29 0 42 0;
#X connect 30 0 59 0;
#X connect 32 0 20 0;
#X connect 35 0 46 0;
#X connect 35 0 101 0;
#X connect 38 0 125 0;
#X connect 39 0 120 0;
#X connect 41 0 42 1;
#X connect 42 0 32 0;
#X connect 42 0 84 0;
#X connect 43 0 95 0;
#X connect 44 0 45 0;
#X connect 45 0 46 1;
#X connect 47 0 48 1;
#X connect 48 0 32 0;
#X connect 48 0 81 0;
#X connect 51 0 109 0;
#X connect 52 0 53 0;
#X connect 53 0 54 1;
#X connect 54 0 56 0;
#X connect 55 0 56 1;
#X connect 56 0 32 0;
#X connect 56 0 85 0;
#X connect 57 0 58 0;
#X connect 57 0 122 0;
#X connect 58 0 136 0;
#X connect 59 0 27 0;
#X connect 61 0 64 0;
#X connect 66 0 7 0;
#X connect 67 0 68 0;
#X connect 67 0 76 0;
#X connect 68 0 66 0;
#X connect 69 0 70 0;
#X connect 69 0 72 0;
#X connect 70 0 71 0;
#X connect 71 0 66 1;
#X connect 73 0 74 0;
#X connect 74 0 69 0;
#X connect 75 0 77 0;
#X connect 77 0 13 1;
#X connect 78 0 88 0;
#X connect 79 0 80 0;
#X connect 80 0 10 0;
#X connect 91 0 108 0;
#X connect 92 0 93 0;
#X connect 93 0 94 1;
#X connect 94 0 48 0;
#X connect 95 0 44 0;
#X connect 96 0 97 0;
#X connect 97 0 92 0;
#X connect 99 0 49 0;
#X connect 102 0 103 0;
#X connect 105 0 120 0;
#X connect 108 0 96 0;
#X connect 109 0 52 0;
#X connect 111 0 112 0;
#X connect 112 0 113 0;
#X connect 113 0 114 1;
#X connect 115 0 121 0;
#X connect 116 0 7 1;
#X connect 117 0 114 0;
#X connect 120 0 106 0;
#X connect 121 0 111 0;
#X connect 122 0 87 0;
#X connect 124 0 123 0;
#X connect 124 0 125 1;
#X connect 125 0 105 0;
#X connect 125 0 98 0;
#X connect 125 0 35 0;
#X connect 125 0 130 0;
#X connect 129 0 131 0;
#X connect 130 0 86 0;
#X connect 130 0 94 0;
#X connect 131 0 130 1;
#X connect 132 0 133 0;
#X connect 133 0 129 0;
#X connect 135 0 137 0;
#X connect 136 0 14 0;
#X connect 136 0 90 0;
#X connect 136 0 54 0;
#X connect 137 0 136 1;
#X connect 138 0 140 0;
#X connect 140 0 135 0;
#X connect 141 0 136 0;
