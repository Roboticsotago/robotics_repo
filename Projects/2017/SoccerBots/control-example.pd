#N canvas 3 49 1194 1520 10;
#X obj 630 202 <<;
#X obj 666 232 |;
#X text 705 237 Bitwise OR;
#X obj 299 42 vsl 15 128 -1 1 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 12700 1;
#X floatatom 299 178 5 0 0 0 - - -, f 5;
#X msg 24 82 Left;
#X msg 125 81 Right;
#X text 45 49 Motor selector;
#X msg 24 104 0;
#X msg 125 103 1;
#X obj 73 162 << 7;
#X floatatom 73 184 5 0 0 0 - - -, f 5;
#X obj 180 248 >= 0;
#X text 223 249 Map to fwd/rev bit;
#X floatatom 180 270 5 0 0 0 - - -, f 5;
#X text 55 0 Pure Data patch for controlling SoccerBot via its serial
command protocol;
#X obj 657 122 *;
#X text 692 125 multiply;
#X obj 656 150 +;
#X text 698 153 add;
#X obj 793 150 -;
#X text 831 152 subtract;
#X obj 795 120 /;
#X text 827 119 divide;
#X msg 645 39 1;
#X text 702 38 Message;
#X floatatom 648 12 5 0 0 0 - - -, f 5;
#X text 706 11 Number;
#X obj 823 11 vsl 15 50 -1 1 0 0 empty empty empty 0 -9 0 10 -262144
-1 -1 0 1;
#X obj 855 33 hsl 50 15 0 1 0 0 empty empty empty -2 -8 0 10 -262144
-1 -1 0 1;
#X text 849 8 sliders;
#X obj 409 343 >> 2;
#X obj 402 238 abs, f 4;
#X floatatom 409 365 5 0 0 0 - - -, f 5;
#X obj 401 295 int;
#X obj 402 260 * 255;
#X floatatom 402 319 5 0 0 0 - - -, f 5;
#X floatatom 334 688 5 0 0 0 - - -, f 5;
#X obj 397 743 % 2;
#X obj 349 741 % 4;
#X obj 310 741 % 8;
#X obj 361 840 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 341 840 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 321 840 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 301 840 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 281 840 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 261 840 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 241 840 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 221 840 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 269 741 % 16;
#X obj 219 741 % 32;
#X obj 169 741 % 64;
#X obj 119 741 % 128;
#X obj 349 763 >= 2;
#X obj 310 763 >= 4;
#X obj 269 763 >= 8;
#X obj 219 763 >= 16;
#X obj 169 763 >= 32;
#X obj 119 763 >= 64;
#X obj 69 741 % 256;
#X obj 69 763 >= 128;
#X text 225 652 Number to binary decoder (for checking the result):
;
#X floatatom 180 318 5 0 0 0 - - -, f 5;
#X obj 180 296 << 6;
#X obj 232 554 +;
#X obj 261 496 +;
#X text 320 56 Speed;
#X text 455 369 Speed bits;
#X obj 662 202 >>;
#X obj 664 260 &;
#X text 711 260 Bitwise AND;
#X text 695 205 Bit shift (double/halve);
#X obj 276 468 t b f;
#X obj 242 527 t b f;
#X text 323 506 Sum to combine into a single byte;
#X text 406 570 TODO: output via serial!;
#X connect 3 0 4 0;
#X connect 4 0 12 0;
#X connect 4 0 32 0;
#X connect 5 0 8 0;
#X connect 6 0 9 0;
#X connect 8 0 10 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 64 0;
#X connect 12 0 14 0;
#X connect 14 0 63 0;
#X connect 31 0 33 0;
#X connect 32 0 35 0;
#X connect 33 0 72 0;
#X connect 34 0 36 0;
#X connect 35 0 34 0;
#X connect 36 0 31 0;
#X connect 37 0 38 0;
#X connect 37 0 39 0;
#X connect 37 0 40 0;
#X connect 37 0 49 0;
#X connect 37 0 50 0;
#X connect 37 0 51 0;
#X connect 37 0 52 0;
#X connect 37 0 59 0;
#X connect 38 0 41 0;
#X connect 39 0 53 0;
#X connect 40 0 54 0;
#X connect 49 0 55 0;
#X connect 50 0 56 0;
#X connect 51 0 57 0;
#X connect 52 0 58 0;
#X connect 53 0 42 0;
#X connect 54 0 43 0;
#X connect 55 0 44 0;
#X connect 56 0 45 0;
#X connect 57 0 46 0;
#X connect 58 0 47 0;
#X connect 59 0 60 0;
#X connect 60 0 48 0;
#X connect 62 0 65 0;
#X connect 63 0 62 0;
#X connect 64 0 37 0;
#X connect 65 0 73 0;
#X connect 72 0 65 0;
#X connect 72 1 65 1;
#X connect 73 0 64 0;
#X connect 73 1 64 1;
