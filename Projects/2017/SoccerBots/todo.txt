Things to be done for the 2017 SoccerBots project

[ ] Register for Nationals!!!
[ ] Move this list to github's issue tracker?

Software:

[ ] Prioritise and complete Pd behaviour for Shutter(attacker)
[ ] Define a DEBUG function or macro for Arduino programs
[?] Rewrite "#ifdef"s to use "#if" conditionals (where it makes sense)
       e.g. "#if DEBUGGING==1" instead of "#ifdef DEBUGGING"
[ ] Robot control behaviour (in Pd)
[Y] Arrange for control program to launch when Raspberry Pi boots
	Pd startup: pd -noaudio -nomidi patch-filename.pd

[.] EEPROM goodness (motor PWM limits, servo ranges, magnetometer calibration data, etc.)
	[Y] Have done this for magnetometer stuff...
	[ ] ...but not for machine-dependent motor speed PWM values and servo ranges

[Y] Add restart-on-error to read_sensors.tcl
	[ ] Could still add catching of write errors if the pipe (TCP from pdsend to Pd) fails..perhaps restart Pd if so.

[Y] Implement shell "until" loops in runeverything.sh for more graceful and efficient startup.

[ ] Edit /etc/hosts (or equivalent) on remote client computers to add:
	192.168.43.253	shutter
	192.168.43.237	boris
[ ] ...and aliases:
	alias shutter='ssh -Y pi@shutter'
	alias boris='ssh -Y pi@boris'
	alias attack='ssh -Y pi@shutter'
	alias goalie='ssh -Y pi@boris'

[Y] Have runeverything.sh launch separate terminal windows for each task, e.g.
	urxvt -name Blah -title Blah -e sh -c "mycmd | targetcmd" &
	(might be different for LXTerminal...ah, but both bots already have urxvt as well)

[Y] Fix slow report frequency on sensor board
	This was due to the DFRobot board being in the wrong mode, and pulseIn() blocking for a long time when the ultrasound sensor got no reflection.
[Y] sensors.ino: reinstate debugging delay (now that we've figured out why the sensor reporting frequency was so low)
[ ] Get Pd patches to properly handle the 0 values reported by the ultrasonic sensor (these mean "out of range", not 0 cm distance)
[Y] Music for the buzzer!
	Tobias has created a nice library of tunes. :)

IR system:

[Y] Implement trigonometry stuff for ball direction finding (use atan2() function)
[Y] Calibrate IR ball distance sensing (want to determine approx. distance based on magnitude of the ball sense vector)
	Will probably need to talk about what a vector is and how you can use and combine them. :)

	To pipe input from serial:
	cu -l ttyUSB0 -s 115200
	
	To pipe a text stream (in FUDI format) into Pd:
	pdsend 7000
	
	Combining the two using a shell pipeline:
	cu -l ttyUSB0 -s 115200 | pdsend 7000

[N] The RCJ IR beacon pattern varies the signal strength! Might be a good idea for our Arduino program to read frequently and calculate the mean signal strength every n samples.
	NOTE: average the raw co-ordinates, not the angle (the sign flip at 180 degrees will cause problems otherwise)
	Probably not necessary now that we've added a hardware-based analog low-pass filter to each sensor. :)


Vision system:

[ ] refine debug function for debug levels

[ ] fix white balance bug when click off image

[Y] Add separate calibration program, and handle saving/loading calibration state

[ ] Try to reduce latency with the Pi Camera and SimpleCV


General:

[Y] Design and implement serial protocol for motor control


Hardware:

[ ] Design and build circuits for detecting and alerting on low battery.
	Could just have a big red LED that comes on when low.
	Or it could provide a signal to the sensor Arduino.
	What threshold? Somewhere around 5.5 V?
		For NiMH, 1.0-1.1 V per cell is probably about the beginning of the end.
		So around 6.0-6.6 V would be a sensible warning threshold.
		Of course, under load, the battery voltage will be a bit lower.
	http://www.edn.com/design/analog/4427219/Simple-circuit-indicates-a-low-battery
		For a threshold around 6-6.6 V, try R1 = 51..56 kohm (or a 100k trimpot)
		Also, R5 (100k) might need to be increased to prevent the LED from turning on slightly under normal conditions. Try 1M.

[Y] Redesign main chassis and see if we can get it lasercut (it might be too large for Chris's 3D printer)
	The revised design was just small enough to print. :)

[Y] Design and fab main robot platform (3D print? lasercut?)

[ ] Implement servo mechanism for wheels? Optical? Hall sensor?

[.] Design and test kicker mechanism. Servo? Maybe a high-speed one from Pololu.

[, ] Trial using a DSpace Robot board for motor and servo control (rather than separate Arduino + H-bridge)

[Y] Motor Enable switch (just a software switch for the DSpace board)

[Y] Build a power+ground bus board (screw terminals for input, header pins for multiple outputs)

[Y] Main power switch (to save having to disconnect the battery when not in use!)

[ ] A pushbutton switch to safely shut down the Pi (with accompanying software)

[ ] A pushbutton switch to set the orientation to the target goal (once EEPROM saving of magnetometer calibration is done)

[?] Add buzzer, and use it to warn of low voltage as reported by the DC-DC converter

[?] Maybe add lights? Just decorative? Must not confuse other robots!

[Y] Build second robot as Goalie.

[Y] Apply threadlocker (e.g. Loctite) to fasteners before competition
	or (perhaps better) use nylock locking nuts

[.] Build IR sensors for ball detection
	The high platform and horizontal sensor mounting means the ball can't reliably be detected when close!
	Could redesign the platform with an angled (conical?) base perhaps.

[.] Compass sensor (Sebastian and Tobias have been working on this)

[Y] Install range sensors front and/or back for collision avoidance.
	[ ] Finish CAD model of mounting bracket and print

[.] Colour sensors for approximate location on the field
	Need to get some - Adafruit?
	We have a prototype using just an active IR reflectance sensor, which seems to work pretty well.
