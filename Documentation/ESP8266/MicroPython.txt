MicroPython on the ESP8266

One of the firmware types that can be flashed to the ESP8266 is a stripped-down version of Python called MicroPython.  This implements a Python REPL interpreter that can be accessed via the ESP8266 board's serial interface.

Included is an "esp" Python module that provides access to special functionality of the ESP8266 board.  There is also a "machine" module that gives access to the analog and digital I/O pins.

http://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html

Adafruit have this guide to getting started:

https://learn.adafruit.com/micropython-basics-how-to-load-micropython-on-a-board/esp8266


To get started quickly, download one of the pre-built firmware binary images from <http://micropython.org/download/#esp8266>:

wget http://micropython.org/resources/firmware/esp8266-20160909-v1.8.4.bin

# Use esptool.py to program the firmware image to the board's flash memory:

esptool.py --port /dev/ttyUSB0 erase_flash

# Then upload the binary image:

# Example command line from docs:

#esptool.py --port /dev/ttyUSB0 --baud 460800 write_flash --flash_size=8m 0 esp8266-2016-05-03-v1.8.bin

# Test one that Chris used:

esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_size=8m 0 esp8266-20160909-v1.8.4.bin
# I haven't tried higher baud rates yet, but at 115200 it doesn't take long (less than a minute).  It didn't seem to need the "-fm dio" argument.  Note that the flash memory on our boards (Winbond W25Q32) is apparently actually 32 Mbit (--flash-size=32m).

# Now also tested to work at 460800 baud. :)  You can also verify the data while writing (although the protocol checksums should normally be sufficient):

esptool.py --port /dev/ttyUSB0 --baud 460800 write_flash --verify --flash_size=32m 0 esp8266-20160909-v1.8.4.bin

# Connect to the board:
gtkterm -p /dev/ttyUSB0 -s 115200

NOTE: I found I also have to press the Reset button to get into the Python REPL after flashing.  Then it works!  Looks awesome...

Run "help()" at the command prompt to get some guidance on how to get set up with a network connection.

The MicroPython REPL doesn't require CR-LF pairs to be sent for end-of-line - just press Enter/Return.  It also has line-editing, tab-completion, and a command history...luxury!

By default, MicroPython will bring up the ESP8266 in WiFi Access Point mode, named something of the form "MicroPython-06abd1", password "micropythoN".  Its default IP address is 192.168.4.1/24.  You can check this by connecting to this AP from a nearby computer and using ping:

ping 192.168.4.1

There is also a Web-based REPL server that you can connect to using this custom client:

http://www.micropython.org/webrepl

Install and point your browser to:

http://192.168.4.1:8266/

Getting started:
https://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/intro.html

--

# MicroPython basic sanity checks, diagnostics:

import esp
esp.check_fw()
esp.info()

print('Hello, World!')

import sys
# sys.float_info.epsilon; #not available
sys.version
sys.platform
sys.modules

import machine
machine.freq()

import port_diag
port_diag.main()

# Soft reboot of MicroPython only:
sys.reset()

# Harder reboot of the board:
machine.reset()

--

# Example GPIO Use:

import machine
pin = machine.Pin(2, machine.Pin.OUT)
pin.high()
pin.low()
# Note that the onboard LED is active-low!

# Flash the LED:

import time

def toggle(p):
	p.value(not p.value())

# NOTE: you may have to press Enter a few times to indicate the end of the function.

while True:
	toggle(pin)
	time.sleep_ms(250)

# The infinite loop will block indefinitely...but you can interrupt using Ctrl-C, just as on a normal Python interpreter. :)

# Next, we'll define a function for flashing the LED continuously, parameterised for control over the flashing speed:

def flasher(period):
	while True:
		toggle(pin)
		time.sleep_ms(period)

flasher(50)
# Ctrl-C

# You can see how much easier iterative, interactive development will be using this style of programming!

--

# Analog read example:

import machine
adc=machine.ADC(0)
adc.read()

--

import esp
esp.info()

--

# Network setup:

# The ESP8266 can operate as a WiFi station, an access point (AP), or both (hybrid mode).

# https://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/network_basics.html

# In hybrid mode, the device presents two network interfaces. These can be configured separately like so:

import network
sta_if = network.WLAN(network.STA_IF)
ap_if = network.WLAN(network.AP_IF)

# You can query the current IP (Internet Protocol) settings for the interface like so:
ap_if.ifconfig()
# ('192.168.4.1', '255.255.255.0', '192.168.4.1', '208.67.222.222')

# The items in the list are the IP address of the interface, the network mask (netmask) which tells how many bits are in the network address (with the remainder being the host address), the gateway (where to send packets not bound for the local network), and the address of the domain name system (DNS) server for resolving symbolic domains names (e.g. "www.otago.ac.nz") to IP addresses (139.80.123.160).

# If you wish to connect to an existing access point, use the station interface on the ESP8266:

sta_if.active(True)

# List available access points:
sta_if.scan()

sta_if.connect('MyAPName', 'S3cr3tP@ssw0rd')

# Connecting may take a few seconds.  To check your connection:

sta_if.isconnected()
sta_if.ifconfig()
# ('192.168.43.73', '255.255.255.0', '192.168.43.1', '192.168.43.1')


# You can also configure the ESP8266 as an access point, using the separate interface that is provided for that purpose.  To configure the ESP8266 as an access point (which might be more useful if operating out in the wild, away from any other WiFi network infrastructure):

ap_if.active(True)
ap_if.config(essid='Tobias_ESP8266', channel=9, authmode=network.AUTH_WPA2_PSK, password='micropythoN')

# When choosing a channel, try to use one that isn't already in use in your vicinity.  On Linux, you can check which channels are in use by nearby APs like so:
# iwlist wlan1 scan | grep Channel: | grep --only-matching '[0-9]*'| sort -n | uniq -c
# The first column shows how many APs are using the channel, and the second is the channel number.

# Hmm, I'm not sure if the channel parameter is actually honoured...

# You can see if any stations are connected like so:
ap_if.isconnected()


# TODO: can the ESP8266 operate as a router, forwarding packets between the STA and AP interfaces???

# Network configuration is stored in a .py file which 

# From a nearby computer, you should be able to see the ESSID (AP name) in the list of Wi-Fi networks, and connect to it.  You should then be able to ping the ESP8266 AP interface, to check for basic connectivity at the IP layer:
# ping 192.168.4.1

--

# ESP8266 filesystem

# You can query the files currently stored on the flash-based filesystem like so:

import os
os.listdir()

# Initially, "boot.py" will be the only file (this is the startup file that launches the Web-REPL at boot time).

# If you want to add your own program to be run at startup, call it "main.py".  The system will run "boot.py" first, then "main.py".

# You can upload files to the filesystem using the WebREPL client.

--

# To make connections using the network, use the socket library.
# In MicroPython for ESP8266, there is a cut-down socket library named usocket that is actually the one being used.
# https://docs.micropython.org/en/latest/esp8266/library/usocket.html

# Simple network server:

import socket
s = socket.socket()
s.bind(('', 4321))
s.listen(1)
while True:
	print('Awaiting connection on port 4321...')
	(c, a) = s.accept()
	print('Got client connection:', a, c)
	c.send('Hello from ESP8266\n')
	#c.shutdown(); # Not supported :(
	c.close()

# Then, on nearby computer:
ncat -v 192.168.4.1 4321

--

# UDP example

# On nearby computer:
# ncat -v -l -u 0.0.0.0 4321

import socket
s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
s.connect(('192.168.4.2',4321))
s.send('Hello\n')

--

# Using UDP to stream to Pure Data
# Pure Data generally assumes the use of the "FUDI" message protocol, which is basically plain text, space-separated values, with a terminating semicolon (and usually line break).

# On Pd, use either the built-in [netreceive] object or the [udpreceive] object from the "mrpeach" library by Martin R. Peach.  [netreceive] assumes FUDI messages, whereas [udpreceive] assumes binary (it outputs a list of decimal numbers corresponding to the bytes received in each message).

# Hmm, we can't send a plain integer via socket.send(), apparently ("object with buffer protocol required"). Wrapping it using chr() seems to work, but that only works up to 127 (beyond that, it breaks it into two bytes).  Hmm.  Maybe just use FUDI text messages and [netreceive] for now...

import time
import socket
client_socket=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
client_socket.connect(('192.168.4.2',5432))
i = 0
while True:
	i = (i + 1) % 256
	client_socket.send(str(i) + ';\n')
	time.sleep_ms(50)
client_socket.close()

# Note that UDP messages are not guaranteed to be received and have a limited payload size!

# You can send multiple values in a single FUDI message like so:
a = 10; b = 20; c = 30
client_socket.send(str(a) + ' ' + str(b) + ' ' + str(c) + ';\n')

--

# Example: WiFi + IP server

# Set up ESP8266 as WiFi Access Point:
import network
ap_if = network.WLAN(network.AP_IF)
ap_if.config(essid="ESP8266", authmode=network.AUTH_WPA_WPA2_PSK, password="ESP8266")
# TODO: network access code
# ...

--

# Power saving options

import machine
# CPU clock speed can be set to 80 or 160 MHz
# For higher performance:
machine.freq(160e6)
# For normal operation:
machine.freq(80e6)

machine.idle()
machine.sleep()
machine.deepsleep()


--

Building MicroPython
(NOTE: probably don't bother, given that pre-built binaries are readily available)

The ESP SDK is required to build MicroPython:

https://github.com/pfalcon/esp-open-sdk


sudo apt-get install make unrar autoconf automake libtool gcc g++ gperf flex bison texinfo gawk ncurses-dev libexpat-dev python-dev python python-serial     sed git unzip bash help2man wget bzip2 libtool-bin

cd /usr/local/src
git clone --recursive https://github.com/pfalcon/esp-open-sdk.git
cd esp-open-sdk
make
# Takes a while...!
